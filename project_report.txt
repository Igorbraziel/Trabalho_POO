Trabalho da Disciplina Programação Orientada a Objetos (UFG)

O trabalho consiste no projeto e implementação de um sistema de software orientado a objetos,
com os seguintes requisitos gerais:

Utilizar pelo menos três dos padrões de projeto GoF,
dentre eles: um dos quatro padrões de projeto apresentados pelo professor em sala de aula;
o padrão de projeto apresentado pelo seu grupo no seminário;
um terceiro padrão de projeto de sua escolha.
Fazer o design (projeto) do sistema em UML, utilizando os diagramas relevantes
(deve explicar o motivo do uso ou não uso dos diagramas UML estudados)
Implementar em Java.
Incluir os conceitos fundamentais estudados na disciplina
(classes, interfaces, encapsulamento, associações, herança, polimorfismo)
Incluir os demais conceitos estudados: arquivos, tratamento de exceções, testes, interface gráfica, threads.

Padrões de projeto utilizados:
- Singleton (Apresentado pelo professor)
- Decorator (Padrão de projeto estrutural)
- Observer (Nossa escolha)

Ideia do projeto:
- Criar uma Lista de tarefas a fazer (to do list).

Resumo:
Nossa lista de tarefas (to do list) será instância da classe ToDoList e deverá ser única, por isso
essa classe conterá o padrão de projeto Singleton, essa lista será composta por tarefas, que serão instâncias
da classe Task, as tarefas terão os seguintes atributos:
(id, nome, nível de dificuldade, prazo final, status de progresso, porcentagem feita)
Também foi implementado o padrão de projeto Observer, a classe ToDoList implementará
a interface Observable e a classe Task implementará a interface Observer, quando ocorrer alguma
alteração na ToDoList, todas as intancias de Task serão notificadas e devidamente atualizadas
conforme a necessidade, por fim o padrão de projeto Decorator também foi implementado
as classes ToDoList, ListDecorator deverão implementar a interface IList, que contém todos os métodos
que deverão ser implementados, a classe ListDecorator é abstrata e serve de base para as classes que herdam
dela, que são (OrderedListByDeadlineDay, OrderedListById, OrderedListByName, OrderedListByPercentageDone)
essas classes são concretas e adicionarão funcionalidades à lista de tarefas em tempo de execução, caso
seja solicitado pelo usuário. Foi criado uma interface gráfica para a interação do usuário com o programa
essa interface é bastante simples mas ilustra todas as funcionalidades do programa, a interface vai exibir
a lista de tarefas e através dos botões o usuário pode criar tarefas e várias outras funcionalidades.